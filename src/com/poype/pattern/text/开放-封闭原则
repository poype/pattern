开放-封闭原则：软件实体(类、模块、函数等等)应该可以扩展，但是不可修改。
即增加一个功能的需求可以添加新的类，但不要更改之前已经运行完美的类。

当我们在设计类的时候，应该尽量让这个类是足够好的，写好就不要去修改了。
如果新需求来，我们增加一些类就完事了，原来的代码能不动则不动。

在最初设计代码时，我们是很难预计哪些地方是会经常变化的，但是我们可以在刚发生变化的时候就采取小范围重构。
例如前面的Operation类计算程序，刚开始只有加法的时候可以按照BadOperation的形式编写代码。
当业务要求增加一个减法操作的时候，就应该对其进行小范围重构，使其适应开放-封闭原则。
这样以后业务再增加乘法、除法等操作的时候，我们就无需更改之前写好的代码，而只需要增加新的类就可以了。

应该尽量在项目开始就明确代码中经常变化的部分，否则等待的时间越长，重构的成本就越高。